---
layout: post
title:      "Now What? Thoughts After Flatiron."
date:       2020-04-06 13:57:32 +0000
permalink:  now_what_thoughts_after_flatiron
---

So this is the blog post for my React/Rails API project for Flatiron School, which means I'm on the cusp of completing the course and am (hopefully) ready to begin my new career in Tech.  It's an exciting, albeit a rather unusual, place to be.  I can't help but feel a little bit like Elsa from Frozen II ..  about to follow this newfound knowledge[ Into the Unknown](https://youtu.be/gIOyB9ZXn8s), while at the same time effectively retiring from my second career (I spent 8 years working in Forestry, followed by another 7 freelancing in homebuilding).  Choosing to make the transition into Tech —as well as choosing Flatiron as the school to do so— was a major decision for me and my family.  Now that this chapter of schooling is coming to a close I have some thoughts, both on the material and on the school, that I feel like sharing.

I want to talk about the material first - namely on how well it is presented in the course.  The material, as it's taught, feels quite well-rounded in the areas of Tech it covers.  The format of the teaching materials (the writing of the lessons, the design of the labs, and the intentions/expectations of the portfolio projects) are quite polished.  The material is light-hearted and takes its time through the more difficult fundamentals - an approach that routinely pays off as each module nears its end.  There is the occasional mismatch in tone (trendy New York Millennial vibes can sometimes be a little on the nose) , and some concepts could have a couple of lessons go through one more writing edit, but in all I'm impressed with the writing quality in the lessons & labs.  

Early lessons (ie pretty much all of Ruby) is clearly structured around the teaching style of Avi Flombaum.  His teaching style gells with my learning style so the provided lecture recordings were valuable for me.  This doesn’t last, though… things change slightly, but abruptly, in the tone of the lessons when JavaScript starts.  Supporting material shifts away from recordings of Avi to a heavy smattering of recordings from technical coach and cohort lead study groups.  Although I would honestly have appreciated consistency through both the Ruby and JS sections in this regard, the slight change in format was a change I tried to work to my advantage - I knew how to learn code from the Ruby section, so the relative ‘lack’ of similar material in the JS section encouraged me to find auxiliary material to help with my studies.  More blog posts, video tutorials, and MDN docs were read for the JS section, and that isn’t a bad thing.

One quick bone to pick: lessons with dense concepts will occasionally(/frequently) have pop-culture GIFs to help convey a particular frame of mind.  These can be damn distracting when you need to read and reread the lesson writing in order to have the material sink in... I appreciate the mood the GIFs can set, but give me a way to turn them off!

The school itself is great. I’m in Canada, and was on the self-paced track, so the onus was really on me to reach out to access resources from the school.  I did, and they almost always responded in kind.  Ask-A-Question was critical to help through my pinch-points in understanding (as well as in debugging actual technical issues, like setting up a local environment).  Coaches on AAQ were great, knowledgeable, and honest with me if they didn’t have the answer to my question off the top of their head.  Response could sometimes be slow when they’re swamped, but they’ve also been willing to spend 2+ hours with me chasing coding concepts down rabbit holes to help me master material.  Hats off to the AAQ crew.

Module leads were also great.  They know their stuff, and are clearly trained at helping students understand the material.  Access to the module leads is restricted to either by appointments that you request, or to study groups they schedule.  This can lead to a couple of holes in support when progressing through material that AAQ isn’t entirely set up to handle.  1-on-1 time with the module leads can be really eye-opening with exploring parts of the language under study that isn’t covered explicitly in the course.  I don’t really know what options there are for making this better - perhaps a dedicated hour of 1-on-1 tutoring for each module with the module lead could help?  Not having perfectly structured supports for learning is also not necessarily a bad thing, either.  Having an issue that can’t immediately be solved by Flatiron can force you to flex your self-learning muscles, which is also a really healthy practice.

The course gives you competency in a specific slice of a specific tech stack: Ruby-On-Rails and React.  This competency feels quite empowering, and I'm honestly confident I could give some serious value to a team as a junior developer with skills I currently have...*if* that team uses Ruby-On-Rails and React.  Chances that my first job will align perfectly with this specific stack configuration is unlikely.  This isn't anyone's fault, but it is something I think about.  I don't know exactly how transferrable my React & Rails skills from Flatiron are to, say, Angular & Python, or Vue & nodeJS, but I'm not entirely worried.  I'm not worried because I *do* know that the tech industry thrives on diverse approaches to tech solutions, and that it is quite unlikely two companies likely run on perfectly identical top-to-bottom technology frameworks.

The most tangible skill I feel I have after finishing the course material is fluency —fluency in Ruby and JavaScript.  I can now comfortably say I am ‘conversationally fluent’ in JavaScript and Ruby, which is awesome.  I feel like I can do some really fun things both right now with the skill I currently have, and also learn and progress with confidence into further mastery of JS & Ruby frameworks.  I also feel like I *now know how to learn a programming language*, and the idea of tackling other languages & frameworks feels not only doable, but also inevitable… python, anyone?

